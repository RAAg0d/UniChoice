// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º–∏
const universityService = require('../services/universityService');
const CONSTANTS = require('../constants');

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
 */
class UniversityController {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤
   * @param {Object} req - –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - –æ—Ç–≤–µ—Ç
   */
  async getUniversities(req, res) {
    try {
      const options = {
        page: parseInt(req.query.page) || 1,
        limit: parseInt(req.query.limit) || CONSTANTS.PAGINATION.DEFAULT_LIMIT,
        name: req.query.name,
        location: req.query.location,
        specialty: req.query.specialty,
        sortBy: req.query.sortBy || 'popularity',
        sortOrder: req.query.sortOrder || 'desc',
        includeAdditive: req.query.includeAdditive === 'true'
      };

      console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:', { 
        includeAdditive: req.query.includeAdditive, 
        type: typeof req.query.includeAdditive, 
        shouldCalculateAdditive: options.includeAdditive 
      });

      const result = await universityService.getUniversities(options);
      
      console.log('‚úÖ –í—Å–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤ —Å –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏–µ–º:', 
        result.universities.filter(u => u.additive_criterion !== undefined).length);

      res.json(result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤:', error);
      res.status(error.statusCode || CONSTANTS.HTTP_STATUS.INTERNAL_SERVER_ERROR)
         .json({ message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ø–æ ID
   * @param {Object} req - –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - –æ—Ç–≤–µ—Ç
   */
  async getUniversityById(req, res) {
    try {
      const { id } = req.params;
      const university = await universityService.getUniversityById(id);
      res.json(university);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞:', error);
      res.status(error.statusCode || CONSTANTS.HTTP_STATUS.INTERNAL_SERVER_ERROR)
         .json({ message: error.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
   * @param {Object} req - –∑–∞–ø—Ä–æ—Å
   * @param {Object} res - –æ—Ç–≤–µ—Ç
   */
  async getRandomUniversity(req, res) {
    try {
      const pool = require('../db/pool');
      const randomUniversity = await pool.query(`
        SELECT * FROM universities
        ORDER BY RANDOM()
        LIMIT 1
      `);

      if (randomUniversity.rows.length === 0) {
        return res.status(CONSTANTS.HTTP_STATUS.NOT_FOUND)
                  .json({ message: '–í—É–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
      }

      res.json(randomUniversity.rows[0]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—É–∑–∞:', error);
      res.status(CONSTANTS.HTTP_STATUS.INTERNAL_SERVER_ERROR)
         .json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' });
    }
  }
}

module.exports = new UniversityController();
