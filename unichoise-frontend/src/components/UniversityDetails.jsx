import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import ReviewsSection from './ReviewsSection';
import SpecialtiesSection from './SpecialtiesSection';
import './UniversityDetails.css';

const UniversityDetails = ({ user }) => {
  const { id } = useParams();
  const [university, setUniversity] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const navigate = useNavigate();

  // Loads single university details with aggregate stats
  useEffect(() => {
    setIsLoading(true);
    setError(null);

    fetch(`http://localhost:5000/universities/${id}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        return response.json();
      })
      .then((data) => {
        setUniversity(data);
        setIsLoading(false);
      })
      .catch((error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—É–∑–µ:', error);
        setError(error.message);
        setIsLoading(false);
      });
  }, [id]);

  if (isLoading) {
    return <div className="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return <div>–û—à–∏–±–∫–∞: {error}</div>;
  }

  if (!university) {
    return <div>–í—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  return (
    <div className="page-container">
      <div className="university-details-container">
        <div className="university-details">
          <button 
            className="back-button" 
            onClick={() => navigate('/universities')}
          >
            –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≤—É–∑–æ–≤
          </button>

          <h1>{university.name}</h1>
          <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {university.description}</p>
          <p><strong>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> {university.location}</p>
          <div className="university-stats">
            <p><strong>–û—Ü–µ–Ω–∫–∞:</strong> {university.average_rating || '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}</p>
            {university.additive_criterion && (
              <p style={{ backgroundColor: '#e8f5e9', fontWeight: 'bold', color: '#2e7d32' }}>
                <strong>üìä –ê–¥–¥–∏—Ç–∏–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π:</strong> {(university.additive_criterion).toFixed(4)}
              </p>
            )}
            <p><strong>–ó–∞—è–≤–ª–µ–Ω–∏–π –≤—Å–µ–≥–æ:</strong> {university.total_applications ?? 0}</p>
            <p><strong>–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π (–¥–Ω–µ–π):</strong> {university.application_frequency !== undefined && university.application_frequency !== null ? university.application_frequency.toFixed(2) : '‚Äî'}</p>
            <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ:</strong> {
              university.days_since_last_application === null || university.days_since_last_application === undefined
                ? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                : `${university.days_since_last_application} –¥–Ω. –Ω–∞–∑–∞–¥`
            }</p>
          </div>
          
          <SpecialtiesSection universityId={id} user={user} />
          
          <ReviewsSection user={user} />
        </div>
      </div>
    </div>
  );
};

export default UniversityDetails;