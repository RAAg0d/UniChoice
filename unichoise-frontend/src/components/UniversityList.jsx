import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './UniversityList.css';

const UniversityList = () => {
  const [universities, setUniversities] = useState([]);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [filters, setFilters] = useState({ name: '', location: '', specialty: '', sortBy: 'popularity', sortOrder: 'desc' });
  const navigate = useNavigate();

  // Loads paginated universities list with optional filters
  const loadUniversities = (page, filters) => {
    setIsLoading(true);
    const queryParams = new URLSearchParams({
      page,
      ...filters,
      includeAdditive: true  // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π
    }).toString();

    fetch(`http://localhost:5000/universities?${queryParams}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        }
        return response.json();
      })
      .then((data) => {
        setUniversities((prev) => (page === 1 ? data.universities : [...prev, ...data.universities]));
        setTotalPages(data.totalPages);
      })
      .catch((error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—É–∑–æ–≤:', error);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      })
      .finally(() => {
        setIsLoading(false);
      });
  };

  useEffect(() => {
    loadUniversities(page, filters);
  }, [page, filters]);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prev) => ({ ...prev, [name]: value }));
    setPage(1);
  };

  return (
    <div className="page-container">
      <div className="university-list-container">
        <div className="university-list-content">
          <h1>–°–ø–∏—Å–æ–∫ –≤—É–∑–æ–≤</h1>
          <button onClick={() => navigate('/')}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</button>

          <div className="filters">
            <div className="filter-group">
              <label className="filter-label">üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</label>
              <input 
                type="text" 
                name="name" 
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—É–∑–∞..." 
                onChange={handleFilterChange}
                className="filter-input"
              />
            </div>
            
            <div className="filter-group">
              <label className="filter-label">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</label>
              <input 
                type="text" 
                name="location" 
                placeholder="–ì–æ—Ä–æ–¥ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω..." 
                onChange={handleFilterChange}
                className="filter-input"
              />
            </div>
            
            <div className="filter-group">
              <label className="filter-label">üéì –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</label>
              <input 
                type="text" 
                name="specialty" 
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏..." 
                onChange={handleFilterChange}
                className="filter-input"
              />
            </div>
            
            <div className="filter-group">
              <label className="filter-label">üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</label>
              <select name="sortBy" onChange={handleFilterChange} defaultValue="popularity" className="filter-select">
                <option value="popularity">üî• –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å</option>
                <option value="rating">‚≠ê –†–µ–π—Ç–∏–Ω–≥</option>
                <option value="additive">üìà –ê–¥–¥–∏—Ç–∏–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π</option>
                <option value="name">üî§ –ù–∞–∑–≤–∞–Ω–∏–µ</option>
                <option value="location">üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</option>
              </select>
            </div>
            
            <div className="filter-group">
              <label className="filter-label">üîÑ –ü–æ—Ä—è–¥–æ–∫</label>
              <select name="sortOrder" onChange={handleFilterChange} defaultValue="desc" className="filter-select">
                <option value="desc">‚¨áÔ∏è –ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                <option value="asc">‚¨ÜÔ∏è –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
              </select>
            </div>
            
            <div className="filter-actions">
              <button 
                onClick={() => {
                  setFilters({ name: '', location: '', specialty: '', sortBy: 'popularity', sortOrder: 'desc' });
                  setPage(1);
                }}
                className="clear-filters-btn"
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
            </div>
          </div>

          {isLoading && <div className="loading-spinner">–ó–∞–≥—Ä—É–∑–∫–∞...</div>}

          {error && <div className="error-message">{error}</div>}

          {/* Render list of universities with aggregate stats */}
          <div className="universities-list">
            {universities.map((university) => (
              <div key={university.universities_id} className="university-item">
                <div className="university-header">
                  <h2>{university.name}</h2>
                </div>
                
                <div className="university-metrics-grid">
                  <div className="metric-card">
                    <div className="metric-label">‚≠ê –û—Ü–µ–Ω–∫–∞</div>
                    <div className="metric-value">{university.average_rating ? `${university.average_rating} / 5` : '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}</div>
                  </div>
                  
                  <div className="metric-card">
                    <div className="metric-label">üìä –ê–¥–¥–∏—Ç–∏–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π</div>
                    <div className="metric-value">{university.additive_criterion ? (university.additive_criterion).toFixed(4) : '‚Äî'}</div>
                  </div>
                  
                  <div className="metric-card">
                    <div className="metric-label">üìù –ó–∞—è–≤–ª–µ–Ω–∏–π –≤—Å–µ–≥–æ</div>
                    <div className="metric-value">{university.total_applications ?? 0}</div>
                  </div>
                  
                  <div className="metric-card">
                    <div className="metric-label">‚è±Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π (–¥–Ω–µ–π)</div>
                    <div className="metric-value">{university.application_frequency !== undefined && university.application_frequency !== null ? university.application_frequency.toFixed(2) : '‚Äî'}</div>
                  </div>
                  
                  <div className="metric-card">
                    <div className="metric-label">üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ</div>
                    <div className="metric-value">
                      {university.days_since_last_application === null || university.days_since_last_application === undefined
                        ? '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
                        : `${university.days_since_last_application} –¥–Ω. –Ω–∞–∑–∞–¥`}
                    </div>
                  </div>
                </div>
                
                <button onClick={() => navigate(`/universities/${university.universities_id}`)}>
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
              </div>
            ))}
          </div>

          {page < totalPages && (
            <button onClick={() => setPage(page + 1)}>–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ</button>
          )}
        </div>
      </div>
    </div>
  );
};

export default UniversityList;